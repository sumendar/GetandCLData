x
}
info()
main()
play()
s <- 6
nxt()
submit()
submit()
submit(x)
submit()
submit()
submit(x)
boring_function(x)
boring_function(15)
boring_function(15)
boring_function(15)
submit()
submit()
boring_function('My first
| function!')
boring_function('My first
+ function!')
boring_function('My first function!')
boring_function
submit()
sum()
my_mean <- function(my_vector) {
avg<-sum(x)/length(x)
avg
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
submit()
my_mean(c(4, 5, 10)
)
submit()
remainder()
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
remainder(num,divisor = 5)
remainder(num=6,divisor = 5)
remainder(num=6,divisor = 5)
remainder(num=6,divisor = 5)
remainder()
remainder(5,6)
info()
skip()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
remainder(div = 2,4 )
remainder(div = 2,4 )
remainder(div = 5,4 )
args(remainder)
submit()
evaluate()
skip()
evaluate(c(1.4, 3.6, 7.9, 8.8))
info()
skip()
play()
evaluate(mean,c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(max,c(1.4, 3.6, 7.9, 8.8))
evaluate(min,c(1.4, 3.6, 7.9, 8.8))
nxt()
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},x)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[2]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
telegram(paste())
telegram(paste)
skip()
telegram(suman)
telegram("suman")
telegram(c("suman","hello","how"))
submit()
skip()
skip()
submit()
skip()
skip()
library(swirl)
swirl()
play()
names(options())
?options
lst <-  list(matrix(1:6,2,3),c(2,5,6,4),"hello")
lapply(lst,mean)
lapply(lst,mean[1])
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <-  lapply(flags, class)
cls_list
class(flags$landmass)
mode(flags$landmass)
typeof(flags$landmass)
x <- 1:3
class(x)
0/0
v<-c(7,2,NULL,6,4,8, NA,2,5,6 )
is.na(v)
library(datasets)
data("iris")
View(iris)
subset(iris,iris$Species=="virginica")
dim(subset(iris,iris$Species=="virginica"))
subset(iris,iris$Species=="virginica")[,1]
mean(subset(iris,iris$Species=="virginica")[,1])
round(mean(subset(iris,iris$Species=="virginica")[,1]))
round(6.2)
data("mtcars")
82.6363636363636 - 209.214285714286
abs(82.6363636363636 - 209.214285714286)
debug(ls)
debug(ls)
ls()
ls()
ls()
nchar(1b037f69e209e0b71538e7048c88d78e30c32714)
nchar("1b037f69e209e0b71538e7048c88d78e30c32714")
nchar("d0500ce1c78f2183b5182fb2d0ad7650b897d678")
A <- matrix(seq(1,18,by=3),2,3)
A
solve(A)
A <- matrix(seq(1,18,by=3),2,2)
solve(A)
A * solve(A)
A * solve(A)
A %*% solve(A)
library(MASS)
ginv(A)
A*ginv(A)
A%*%ginv(A)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
plot(x,y)
rm(list = ls())
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
system.time()
library(swirl)
install_course("Dates and Times with lubridate")
info()
main()
swirl()
swirl()
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
info()
skip()
today()
this_day_today()
this_day <- today()
this_day
year()
year(this_day)
month(this_day)
day(this_day)
wday(this_day)
wday(this_day,label = TRUE)
skip()
skip()
skip()
skipt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
info()
main()
play()
nxt()
install_course_github("swirldev", "R_Programming_E")
swirl()
Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
install_course_github("Open Intro")
install_course_github("Open_Intro/Overview_of_Statistics")
install_course_github("Open_Intro/Overview_of_Statistics")
install_course_github("Open_Intro")
install_course_github("Open_Intro/Overview_of_Statistics")
install_course_github("Overview_of_Statistics")
install_course("Open_Intro/Overview_of_Statistics")
install_course("Open_Intro/Overview_of_Statistics")
install_course("Overview_of_Statistics")
swirl()
install_course("Open_Intro/Overview_of_Statistics")
install_course("Open_Intro")
install_course("Overview_of_Statistics")
install_course("Open_Intro/Overview_of_Statistics")
install_course("Open Intro/Overview of Statistics")
uninstall_course("Overview of Statistics")
install_from_swirl("Open Intro")
install_from_swirl("Data_Analysis")
info()
main()
swirl()
swirl()
install_from_swirl("Mathematical Biostatistics Boot Camp")
swirl()
swirl()
swirl()
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n<-length(allMPG)
tstat <- (sampMeanMPG-12.0)/sqrt(sampVarMPG/n)
tStat <- (sampMeanMPG-12.0)/sqrt(sampVarMPG/n)
myDF <- n - 1
tstat
tStat
tStat
rm(tstat)
tStat
rm(tstat)
tstat
myDF
pval1 <- pt(tStat,df = myDF,lower.tail = FALSE)
pVal <- pVal * 2
pVal <- pVal*2
pval <- pval*2
pVal <- pVal1 * 2
pVal
play()
pVal
options(scipen = 999)
pVal
nxt()
t.test(allMPG, mu=12.0,alternative="two.sided")
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars$type
cars
10
range(cars$price)
nxt()
sum(cars$price)
sum(cars$price)/nrow(cars)
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
mean(mpg.sorted)
mean(19,20)
median(mpg.midsize)
summary(cars$mpgCity)
info()
nxt()
swirl()
30
25
no
nxt()
9
1
4
7
19
nxt()
15 - 30
q3 - q1
quantile(cars[cars$type=="midsize"],3)
quantile(subset(cars[cars$type=="midsize"],3))
quantile(subset(cars[cars$type=="midsize"]),3)
subset(cars,cars$type=="midsize"]
cars$type =="midsize"
cars[cars$type =="midsize"]
nxt()
skip()
skip()
16 -20
Q1 - Q3
skip()
14-20
10-50
filesPath <- "C:/Users/jb/Documents/Analytics course/coursera getting and cleaning data/course project/UCI HAR Dataset"
setwd(filesPath)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
###Unzip DataSet to /data directory
unzip(zipfile="./data/Dataset.zip",exdir="./data")
filesPath <- "D:/GitHub/GetandCLData/UCI HAR Dataset"
setwd(filesPath)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
###Unzip DataSet to /data directory
unzip(zipfile="./data/Dataset.zip",exdir="./data")
filesPath <- "D:/GitHub/GetandCLData/UCI HAR Dataset"
# Read subject files
dataSubjectTrain <- tbl_df(read.table(file.path(filesPath, "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path(filesPath, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(filesPath, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(filesPath, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(filesPath, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(filesPath, "test" , "X_test.txt" )))
library(dplyr)
filesPath <- "D:/GitHub/GetandCLData/UCI HAR Dataset"
# Read subject files
dataSubjectTrain <- tbl_df(read.table(file.path(filesPath, "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path(filesPath, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(filesPath, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(filesPath, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(filesPath, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(filesPath, "test" , "X_test.txt" )))
# for both Activity and Subject files this will merge the training and the test sets by row binding
#and rename variables "subject" and "activityNum"
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
#combine the DATA training and test files
dataTable <- rbind(dataTrain, dataTest)
# name variables according to feature e.g.(V1 = "tBodyAcc-mean()-X")
dataFeatures <- tbl_df(read.table(file.path(filesPath, "features.txt")))
setnames(dataFeatures, names(dataFeatures), c("featureNum", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
#column names for activity labels
activityLabels<- tbl_df(read.table(file.path(filesPath, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activityNum","activityName"))
# Merge columns
alldataSubjAct<- cbind(alldataSubject, alldataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
library(data.table)
# for both Activity and Subject files this will merge the training and the test sets by row binding
#and rename variables "subject" and "activityNum"
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
#combine the DATA training and test files
dataTable <- rbind(dataTrain, dataTest)
# name variables according to feature e.g.(V1 = "tBodyAcc-mean()-X")
dataFeatures <- tbl_df(read.table(file.path(filesPath, "features.txt")))
setnames(dataFeatures, names(dataFeatures), c("featureNum", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
#column names for activity labels
activityLabels<- tbl_df(read.table(file.path(filesPath, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activityNum","activityName"))
# Merge columns
alldataSubjAct<- cbind(alldataSubject, alldataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
# Reading "features.txt" and extracting only the mean and standard deviation
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE) #var name
# Taking only measurements for the mean and standard deviation and add "subject","activityNum"
dataFeaturesMeanStd <- union(c("subject","activityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
## create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
##enter name of activity into dataTable
dataTable <- merge(activityLabels, dataTable , by="activityNum", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
## create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
dataFeaturesMeanStd <- union(c("subject","activityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
#Names before
head(str(dataTable),2)
names(dataTable)<-gsub("std()", "SD", names(dataTable))
names(dataTable)<-gsub("mean()", "MEAN", names(dataTable))
names(dataTable)<-gsub("^t", "time", names(dataTable))
names(dataTable)<-gsub("^f", "frequency", names(dataTable))
names(dataTable)<-gsub("Acc", "Accelerometer", names(dataTable))
names(dataTable)<-gsub("Gyro", "Gyroscope", names(dataTable))
names(dataTable)<-gsub("Mag", "Magnitude", names(dataTable))
names(dataTable)<-gsub("BodyBody", "Body", names(dataTable))
# Names after
head(str(dataTable),6)
write.table(dataTable, "TidyData.txt", row.name=FALSE)
library(tidyr)
filesPath <- "D:/GitHub/GetandCLData"
setwd(filesPath)
###Load required packages
library(dplyr)
library(data.table)
library(tidyr)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
###Unzip DataSet to /data directory
unzip(zipfile="./data/Dataset.zip",exdir="./data")
filesPath <- "D:/GitHub/GetandCLData"
# Read subject files
dataSubjectTrain <- tbl_df(read.table(file.path(filesPath, "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path(filesPath, "test" , "subject_test.txt" )))
# Read activity files
dataActivityTrain <- tbl_df(read.table(file.path(filesPath, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(filesPath, "test" , "Y_test.txt" )))
#Read data files.
dataTrain <- tbl_df(read.table(file.path(filesPath, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(filesPath, "test" , "X_test.txt" )))
# for both Activity and Subject files this will merge the training and the test sets by row binding
#and rename variables "subject" and "activityNum"
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
#combine the DATA training and test files
dataTable <- rbind(dataTrain, dataTest)
# name variables according to feature e.g.(V1 = "tBodyAcc-mean()-X")
dataFeatures <- tbl_df(read.table(file.path(filesPath, "features.txt")))
setnames(dataFeatures, names(dataFeatures), c("featureNum", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
#column names for activity labels
activityLabels<- tbl_df(read.table(file.path(filesPath, "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activityNum","activityName"))
# Merge columns
alldataSubjAct<- cbind(alldataSubject, alldataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
# Reading "features.txt" and extracting only the mean and standard deviation
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE) #var name
# Taking only measurements for the mean and standard deviation and add "subject","activityNum"
##enter name of activity into dataTable
dataTable <- merge(activityLabels, dataTable , by="activityNum", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
## create dataTable with variable means sorted by subject and Activity
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
dataFeaturesMeanStd <- union(c("subject","activityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
#Names before
head(str(dataTable),2)
names(dataTable)<-gsub("std()", "SD", names(dataTable))
names(dataTable)<-gsub("mean()", "MEAN", names(dataTable))
names(dataTable)<-gsub("^t", "time", names(dataTable))
names(dataTable)<-gsub("^f", "frequency", names(dataTable))
names(dataTable)<-gsub("Acc", "Accelerometer", names(dataTable))
names(dataTable)<-gsub("Gyro", "Gyroscope", names(dataTable))
names(dataTable)<-gsub("Mag", "Magnitude", names(dataTable))
names(dataTable)<-gsub("BodyBody", "Body", names(dataTable))
# Names after
head(str(dataTable),6)
write.table(dataTable, "TidyData.txt", row.name=FALSE)
